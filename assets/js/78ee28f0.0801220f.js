"use strict";(self.webpackChunksmart_grow_capiro=self.webpackChunksmart_grow_capiro||[]).push([[3282],{5024:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>t,default:()=>u,frontMatter:()=>s,metadata:()=>c,toc:()=>a});var i=r(5893),o=r(1151);const s={id:"mqtt-client-js",title:"client.js"},t="Archivo client.js en la Carpeta mqtt",c={id:"APIDocs/Archivos/mqtt/mqtt-client-js",title:"client.js",description:"El archivo client.js en la carpeta mqtt define el cliente MQTT y gestiona la conexi\xf3n con el broker MQTT para la comunicaci\xf3n as\xedncrona entre la API y los dispositivos MQTT.",source:"@site/docs/APIDocs/Archivos/mqtt/client.md",sourceDirName:"APIDocs/Archivos/mqtt",slug:"/APIDocs/Archivos/mqtt/mqtt-client-js",permalink:"/docs/APIDocs/Archivos/mqtt/mqtt-client-js",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{id:"mqtt-client-js",title:"client.js"},sidebar:"tutorialSidebar",previous:{title:"user.model.js",permalink:"/docs/APIDocs/Archivos/models/user-model-js"},next:{title:"alerts.routes.js",permalink:"/docs/APIDocs/Archivos/routes/alerts-routes-js"}},l={},a=[{value:"Contenido del Archivo",id:"contenido-del-archivo",level:2},{value:"Descripci\xf3n",id:"descripci\xf3n",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.h1,{id:"archivo-clientjs-en-la-carpeta-mqtt",children:["Archivo ",(0,i.jsx)(n.code,{children:"client.js"})," en la Carpeta ",(0,i.jsx)(n.code,{children:"mqtt"})]}),"\n",(0,i.jsxs)(n.p,{children:["El archivo ",(0,i.jsx)(n.code,{children:"client.js"})," en la carpeta ",(0,i.jsx)(n.code,{children:"mqtt"})," define el cliente MQTT y gestiona la conexi\xf3n con el broker MQTT para la comunicaci\xf3n as\xedncrona entre la API y los dispositivos MQTT."]}),"\n",(0,i.jsx)(n.h2,{id:"contenido-del-archivo",children:"Contenido del Archivo"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-jsx",children:"// Importar m\xf3dulos necesarios\r\nimport mqtt from 'mqtt';\r\nimport Garland from '../models/garland.model.js';\r\nimport Control from '../models/control.model.js';\r\nimport Block from '../models/block.model.js';\r\nimport app from '../app.js';\r\nimport { generateAlert, generateAlertBlocks } from '../libs/functions.js';\r\n\r\n// Definir t\xf3picos MQTT\r\nconst topicGuirnaldas = 'guirnaldas';\r\nconst topicControl = 'capiro/control/verificar';\r\nconst topicBloques = 'capiro/control/bloques';\r\n\r\n// Configuraci\xf3n de la conexi\xf3n MQTT\r\nconst options = {\r\n    clientId: 'emqx_test-1152215097',  // Identificador \xfanico del cliente MQTT\r\n};\r\n\r\n// Crear el cliente MQTT\r\nconst client = mqtt.connect('mqtt://test.mosquitto.org:1883', options);\r\nconsole.log('Conexi\xf3n MQTT establecida');\r\n\r\n// Evento de conexi\xf3n establecida\r\nclient.on('connect', () => {\r\n    // Suscribirse a los t\xf3picos relevantes\r\n    client.subscribe(topicGuirnaldas, (err) => { if (err) console.error('Error al suscribirse al tema', err); });\r\n    client.subscribe(topicControl, (err) => { if (err) console.error('Error al suscribirse al tema', err); });\r\n    client.subscribe(topicBloques, (err) => { if (err) console.error('Error al suscribirse al tema', err); });\r\n});\r\n\r\n// Evento de mensaje recibido\r\nclient.on('message', async (topic, message) => {\r\n    const messageReceive = JSON.parse(message.toString());\r\n\r\n    // Manejo de mensajes para diferentes t\xf3picos\r\n    if (topic === topicGuirnaldas) {\r\n        let warning = false;\r\n        const garland = await Garland.findOne({\r\n            bloque: messageReceive.bloque,\r\n            guirnalda: messageReceive.guirnalda\r\n        });\r\n\r\n        // Generar alerta si es necesario\r\n        if (messageReceive.estado === 'on') {\r\n            if (generateAlert(messageReceive, garland)) {\r\n                warning = true;\r\n            }\r\n        }\r\n\r\n        // Actualizar estado de la guirnalda en la base de datos\r\n        await Garland.findOneAndUpdate(\r\n            {\r\n                bloque: messageReceive.bloque,\r\n                guirnalda: messageReceive.guirnalda\r\n            },\r\n            {\r\n                bloque: messageReceive.bloque,\r\n                guirnalda: messageReceive.guirnalda,\r\n                estado: warning ? 'warning' : messageReceive.estado\r\n            }\r\n        );\r\n\r\n        // Emitir evento de actualizaci\xf3n de guirnaldas\r\n        app.emit('garland');\r\n    } else if (topic === topicControl) {\r\n        // Obtener datos de control asociados al bloque y recientes\r\n        const dataControl = await Control.findOne({ bloque: messageReceive.bloque, reciente: true });\r\n        const date = new Date();\r\n\r\n        // Crear objeto de control para enviar al dispositivo\r\n        const controlEsp = {\r\n            start_time: dataControl.hora_inicio,\r\n            end_time: dataControl.hora_final,\r\n            on_time: dataControl.tiempo_encendido,\r\n            off_time: dataControl.tiempo_apagado,\r\n            date: date.getTime() / 1000\r\n        };\r\n\r\n        // Publicar datos de control al t\xf3pico correspondiente\r\n        setTimeout(() => {\r\n            client.publish(`capiro/${messageReceive.bloque}/control`, JSON.stringify(controlEsp), (error) => {\r\n                if (error) {\r\n                    console.log('No se pudo enviar el mensaje');\r\n                    console.log(error);\r\n                }\r\n            });\r\n        }, 2000);\r\n    } else if (topic === topicBloques) {\r\n        // Generar alerta y actualizar estado del bloque en la base de datos\r\n        if (messageReceive.estado_lectura !== messageReceive.estado_salida) {\r\n            generateAlertBlocks(messageReceive);\r\n            await Block.findOneAndUpdate({ bloque: messageReceive.bloque }, {\r\n                bloque: messageReceive.bloque,\r\n                estado: 'warning'\r\n            });\r\n        } else {\r\n            await Block.findOneAndUpdate({ bloque: messageReceive.bloque }, {\r\n                bloque: messageReceive.bloque,\r\n                estado: messageReceive.estado_lectura ? 'on' : 'off'\r\n            });\r\n        }\r\n\r\n        // Emitir evento de actualizaci\xf3n de bloques\r\n        app.emit('blocks');\r\n    }\r\n});\r\n\r\n// Evento de cierre de conexi\xf3n\r\nclient.on('close', () => {\r\n    console.log('Conexi\xf3n MQTT cerrada inesperadamente');\r\n});\r\n\r\n// Exportar el cliente MQTT\r\nexport default client;\n"})}),"\n",(0,i.jsx)(n.h2,{id:"descripci\xf3n",children:"Descripci\xf3n"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Importaci\xf3n de M\xf3dulos:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Se importa la biblioteca `"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"mqtt` para la comunicaci\xf3n MQTT y se importan los modelos relevantes y funciones desde otros archivos."}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Definici\xf3n de T\xf3picos MQTT:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Se definen constantes para los t\xf3picos MQTT que ser\xe1n utilizados en la comunicaci\xf3n."}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Configuraci\xf3n de la Conexi\xf3n MQTT:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Se establecen opciones y configuraciones para la conexi\xf3n MQTT, incluyendo el cliente ID."}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Creaci\xf3n del Cliente MQTT:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Se crea el cliente MQTT utilizando la biblioteca ",(0,i.jsx)(n.code,{children:"mqtt"})," y se establece la conexi\xf3n con el broker MQTT."]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Eventos:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Se manejan eventos como la conexi\xf3n exitosa (",(0,i.jsx)(n.code,{children:"connect"}),"), la recepci\xf3n de mensajes (",(0,i.jsx)(n.code,{children:"message"}),"), y el cierre de conexi\xf3n (",(0,i.jsx)(n.code,{children:"close"}),")."]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Manejo de Mensajes:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Se gestionan los mensajes recibidos en funci\xf3n del t\xf3pico al que pertenecen, realizando acciones espec\xedficas y actualizando la base de datos."}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Publicaci\xf3n de Mensajes:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Se utiliza el cliente MQTT para publicar mensajes en t\xf3picos espec\xedficos."}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Exportaci\xf3n del Cliente MQTT:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Se exporta el cliente MQTT para que pueda ser utilizado en otros archivos del proyecto."}),"\n"]}),"\n"]}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,o.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},1151:(e,n,r)=>{r.d(n,{Z:()=>c,a:()=>t});var i=r(7294);const o={},s=i.createContext(o);function t(e){const n=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:t(e.components),i.createElement(s.Provider,{value:n},e.children)}}}]);