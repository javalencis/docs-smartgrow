"use strict";(self.webpackChunksmart_grow_capiro=self.webpackChunksmart_grow_capiro||[]).push([[2799],{8514:(o,r,n)=>{n.r(r),n.d(r,{assets:()=>a,contentTitle:()=>s,default:()=>u,frontMatter:()=>l,metadata:()=>c,toc:()=>i});var e=n(5893),t=n(1151);const l={id:"control-controllers-js",title:"control.controllers.js"},s="Archivo control.controllers.js",c={id:"APIDocs/Archivos/controllers/control-controllers-js",title:"control.controllers.js",description:"El archivo control.controllers.js contiene el controlador responsable de gestionar las operaciones relacionadas con el control de los bloques en la API. Este controlador se encarga de almacenar datos de control, como la hora de inicio, la hora final y los tiempos de encendido y apagado.",source:"@site/docs/APIDocs/Archivos/controllers/control.md",sourceDirName:"APIDocs/Archivos/controllers",slug:"/APIDocs/Archivos/controllers/control-controllers-js",permalink:"/docs/APIDocs/Archivos/controllers/control-controllers-js",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{id:"control-controllers-js",title:"control.controllers.js"},sidebar:"tutorialSidebar",previous:{title:"blocks.controllers.js",permalink:"/docs/APIDocs/Archivos/controllers/blocks-controllers-js"},next:{title:"garlands.controllers.js",permalink:"/docs/APIDocs/Archivos/controllers/garlands-controllers-js"}},a={},i=[{value:"Contenido del Archivo",id:"contenido-del-archivo",level:2},{value:"Descripci\xf3n",id:"descripci\xf3n",level:2}];function d(o){const r={code:"code",h1:"h1",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.a)(),...o.components};return(0,e.jsxs)(e.Fragment,{children:[(0,e.jsxs)(r.h1,{id:"archivo-controlcontrollersjs",children:["Archivo ",(0,e.jsx)(r.code,{children:"control.controllers.js"})]}),"\n",(0,e.jsxs)(r.p,{children:["El archivo ",(0,e.jsx)(r.code,{children:"control.controllers.js"})," contiene el controlador responsable de gestionar las operaciones relacionadas con el control de los bloques en la API. Este controlador se encarga de almacenar datos de control, como la hora de inicio, la hora final y los tiempos de encendido y apagado."]}),"\n",(0,e.jsx)(r.h2,{id:"contenido-del-archivo",children:"Contenido del Archivo"}),"\n",(0,e.jsx)(r.pre,{children:(0,e.jsx)(r.code,{className:"language-jsx",children:'// Importar el modelo de Control y la instancia del cliente MQTT\r\nimport Control from \'../models/control.model.js\';\r\nimport client from \'../mqtt/client.js\';\r\n\r\n// Controlador para almacenar datos de control\r\nexport const saveControl = async (req, res) => {\r\n    const { bloque } = req.body;\r\n\r\n    try {\r\n        // Desactivar el estado "reciente" de los controles anteriores del mismo bloque\r\n        await Control.updateMany({ bloque }, { $set: { reciente: false } });\r\n\r\n        // Crear un nuevo control con la informaci\xf3n proporcionada\r\n        const dataControl = { ...req.body, reciente: true };\r\n        const newControl = new Control(dataControl);\r\n        const savedControl = await newControl.save();\r\n\r\n        // Obtener la fecha actual\r\n        const date = new Date();\r\n\r\n        // Configurar datos de control para el cliente MQTT\r\n        const controlEsp = {\r\n            start_time: savedControl.hora_inicio,\r\n            end_time: savedControl.hora_final,\r\n            on_time: savedControl.tiempo_encendido,\r\n            off_time: savedControl.tiempo_apagado,\r\n            date: date.getTime() / 1000\r\n        };\r\n\r\n        // Publicar informaci\xf3n de control al cliente MQTT\r\n        client.publish("capiro/" + bloque + "/control", JSON.stringify(controlEsp), (error) => {\r\n            if (error) {\r\n                console.log("No se pudo enviar el mensaje");\r\n                console.log(error);\r\n            }\r\n        });\r\n\r\n        res.status(200).json({\r\n            status: true,\r\n            message: "Control guardado con \xe9xito",\r\n            data: savedControl\r\n        });\r\n    } catch (error) {\r\n        res.json({\r\n            status: false,\r\n            message: "Error almacenando datos",\r\n        });\r\n    }\r\n};\n'})}),"\n",(0,e.jsx)(r.h2,{id:"descripci\xf3n",children:"Descripci\xf3n"}),"\n",(0,e.jsxs)(r.ul,{children:["\n",(0,e.jsxs)(r.li,{children:[(0,e.jsxs)(r.strong,{children:["Controlador ",(0,e.jsx)(r.code,{children:"saveControl"}),":"]}),"\n",(0,e.jsxs)(r.ul,{children:["\n",(0,e.jsx)(r.li,{children:'Este controlador se encarga de almacenar datos de control en la base de datos. Primero, desactiva el estado "reciente" de los controles anteriores del mismo bloque. Luego, crea un nuevo control y lo guarda. Finalmente, publica la informaci\xf3n de control al cliente MQTT para su procesamiento.'}),"\n"]}),"\n"]}),"\n"]})]})}function u(o={}){const{wrapper:r}={...(0,t.a)(),...o.components};return r?(0,e.jsx)(r,{...o,children:(0,e.jsx)(d,{...o})}):d(o)}},1151:(o,r,n)=>{n.d(r,{Z:()=>c,a:()=>s});var e=n(7294);const t={},l=e.createContext(t);function s(o){const r=e.useContext(l);return e.useMemo((function(){return"function"==typeof o?o(r):{...r,...o}}),[r,o])}function c(o){let r;return r=o.disableParentContext?"function"==typeof o.components?o.components(t):o.components||t:s(o.components),e.createElement(l.Provider,{value:r},o.children)}}}]);